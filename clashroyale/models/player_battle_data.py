# coding: utf-8

"""
    Clash Royale API

    Check out <a href=\"https://developer.clashroyale.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash Royale API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashroyale.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from clashroyale.models.player_battle_round import PlayerBattleRound
from clashroyale.models.player_clan import PlayerClan
from clashroyale.models.player_item_level import PlayerItemLevel
from typing import Optional, Set
from typing_extensions import Self

class PlayerBattleData(BaseModel):
    """
    PlayerBattleData
    """ # noqa: E501
    clan: Optional[PlayerClan] = None
    cards: Optional[List[PlayerItemLevel]] = None
    support_cards: Optional[List[PlayerItemLevel]] = Field(default=None, alias="supportCards")
    rounds: Optional[List[PlayerBattleRound]] = None
    crowns: Optional[StrictInt] = None
    princess_towers_hit_points: Optional[List[StrictInt]] = Field(default=None, alias="princessTowersHitPoints")
    elixir_leaked: Optional[Dict[str, Any]] = Field(default=None, alias="elixirLeaked")
    global_rank: Optional[StrictInt] = Field(default=None, alias="globalRank")
    tag: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    starting_trophies: Optional[StrictInt] = Field(default=None, alias="startingTrophies")
    trophy_change: Optional[StrictInt] = Field(default=None, alias="trophyChange")
    king_tower_hit_points: Optional[StrictInt] = Field(default=None, alias="kingTowerHitPoints")
    __properties: ClassVar[List[str]] = ["clan", "cards", "supportCards", "rounds", "crowns", "princessTowersHitPoints", "elixirLeaked", "globalRank", "tag", "name", "startingTrophies", "trophyChange", "kingTowerHitPoints"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayerBattleData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of clan
        if self.clan:
            _dict['clan'] = self.clan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in cards (list)
        _items = []
        if self.cards:
            for _item_cards in self.cards:
                if _item_cards:
                    _items.append(_item_cards.to_dict())
            _dict['cards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in support_cards (list)
        _items = []
        if self.support_cards:
            for _item_support_cards in self.support_cards:
                if _item_support_cards:
                    _items.append(_item_support_cards.to_dict())
            _dict['supportCards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rounds (list)
        _items = []
        if self.rounds:
            for _item_rounds in self.rounds:
                if _item_rounds:
                    _items.append(_item_rounds.to_dict())
            _dict['rounds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayerBattleData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clan": PlayerClan.from_dict(obj["clan"]) if obj.get("clan") is not None else None,
            "cards": [PlayerItemLevel.from_dict(_item) for _item in obj["cards"]] if obj.get("cards") is not None else None,
            "supportCards": [PlayerItemLevel.from_dict(_item) for _item in obj["supportCards"]] if obj.get("supportCards") is not None else None,
            "rounds": [PlayerBattleRound.from_dict(_item) for _item in obj["rounds"]] if obj.get("rounds") is not None else None,
            "crowns": obj.get("crowns"),
            "princessTowersHitPoints": obj.get("princessTowersHitPoints"),
            "elixirLeaked": obj.get("elixirLeaked"),
            "globalRank": obj.get("globalRank"),
            "tag": obj.get("tag"),
            "name": obj.get("name"),
            "startingTrophies": obj.get("startingTrophies"),
            "trophyChange": obj.get("trophyChange"),
            "kingTowerHitPoints": obj.get("kingTowerHitPoints")
        })
        return _obj



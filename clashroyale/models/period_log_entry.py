# coding: utf-8

"""
    Clash Royale API

    Check out <a href=\"https://developer.clashroyale.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash Royale API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashroyale.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from clashroyale.models.period_log_entry_clan import PeriodLogEntryClan
from typing import Optional, Set
from typing_extensions import Self

class PeriodLogEntry(BaseModel):
    """
    PeriodLogEntry
    """ # noqa: E501
    clan: Optional[PeriodLogEntryClan] = None
    points_earned: Optional[StrictInt] = Field(default=None, alias="pointsEarned")
    progress_start_of_day: Optional[StrictInt] = Field(default=None, alias="progressStartOfDay")
    progress_end_of_day: Optional[StrictInt] = Field(default=None, alias="progressEndOfDay")
    end_of_day_rank: Optional[StrictInt] = Field(default=None, alias="endOfDayRank")
    progress_earned: Optional[StrictInt] = Field(default=None, alias="progressEarned")
    num_of_defenses_remaining: Optional[StrictInt] = Field(default=None, alias="numOfDefensesRemaining")
    progress_earned_from_defenses: Optional[StrictInt] = Field(default=None, alias="progressEarnedFromDefenses")
    __properties: ClassVar[List[str]] = ["clan", "pointsEarned", "progressStartOfDay", "progressEndOfDay", "endOfDayRank", "progressEarned", "numOfDefensesRemaining", "progressEarnedFromDefenses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PeriodLogEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of clan
        if self.clan:
            _dict['clan'] = self.clan.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PeriodLogEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clan": PeriodLogEntryClan.from_dict(obj["clan"]) if obj.get("clan") is not None else None,
            "pointsEarned": obj.get("pointsEarned"),
            "progressStartOfDay": obj.get("progressStartOfDay"),
            "progressEndOfDay": obj.get("progressEndOfDay"),
            "endOfDayRank": obj.get("endOfDayRank"),
            "progressEarned": obj.get("progressEarned"),
            "numOfDefensesRemaining": obj.get("numOfDefensesRemaining"),
            "progressEarnedFromDefenses": obj.get("progressEarnedFromDefenses")
        })
        return _obj



# coding: utf-8

"""
    Clash Royale API

    Check out <a href=\"https://developer.clashroyale.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash Royale API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashroyale.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from clashroyale.models.arena import Arena
from typing import Optional, Set
from typing_extensions import Self

class ClanMember(BaseModel):
    """
    ClanMember
    """ # noqa: E501
    arena: Optional[Arena] = None
    clan_chest_points: Optional[StrictInt] = Field(default=None, alias="clanChestPoints")
    last_seen: Optional[StrictStr] = Field(default=None, alias="lastSeen")
    tag: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    role: Optional[StrictStr] = None
    exp_level: Optional[StrictInt] = Field(default=None, alias="expLevel")
    trophies: Optional[StrictInt] = None
    clan_rank: Optional[StrictInt] = Field(default=None, alias="clanRank")
    previous_clan_rank: Optional[StrictInt] = Field(default=None, alias="previousClanRank")
    donations: Optional[StrictInt] = None
    donations_received: Optional[StrictInt] = Field(default=None, alias="donationsReceived")
    __properties: ClassVar[List[str]] = ["arena", "clanChestPoints", "lastSeen", "tag", "name", "role", "expLevel", "trophies", "clanRank", "previousClanRank", "donations", "donationsReceived"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['not_member', 'member', 'leader', 'admin', 'coLeader']):
            raise ValueError("must be one of enum values ('not_member', 'member', 'leader', 'admin', 'coLeader')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClanMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of arena
        if self.arena:
            _dict['arena'] = self.arena.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClanMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arena": Arena.from_dict(obj["arena"]) if obj.get("arena") is not None else None,
            "clanChestPoints": obj.get("clanChestPoints"),
            "lastSeen": obj.get("lastSeen"),
            "tag": obj.get("tag"),
            "name": obj.get("name"),
            "role": obj.get("role"),
            "expLevel": obj.get("expLevel"),
            "trophies": obj.get("trophies"),
            "clanRank": obj.get("clanRank"),
            "previousClanRank": obj.get("previousClanRank"),
            "donations": obj.get("donations"),
            "donationsReceived": obj.get("donationsReceived")
        })
        return _obj



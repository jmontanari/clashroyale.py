# coding: utf-8

"""
    Clash Royale API

    Check out <a href=\"https://developer.clashroyale.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash Royale API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashroyale.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from clashroyale.models.clan_member import ClanMember
from clashroyale.models.location import Location
from typing import Optional, Set
from typing_extensions import Self

class Clan(BaseModel):
    """
    Clan
    """ # noqa: E501
    member_list: Optional[List[ClanMember]] = Field(default=None, alias="memberList")
    tag: Optional[StrictStr] = None
    clan_score: Optional[StrictInt] = Field(default=None, alias="clanScore")
    clan_chest_max_level: Optional[StrictInt] = Field(default=None, alias="clanChestMaxLevel")
    clan_war_trophies: Optional[StrictInt] = Field(default=None, alias="clanWarTrophies")
    required_trophies: Optional[StrictInt] = Field(default=None, alias="requiredTrophies")
    donations_per_week: Optional[StrictInt] = Field(default=None, alias="donationsPerWeek")
    badge_id: Optional[StrictInt] = Field(default=None, alias="badgeId")
    clan_chest_status: Optional[StrictStr] = Field(default=None, alias="clanChestStatus")
    clan_chest_level: Optional[StrictInt] = Field(default=None, alias="clanChestLevel")
    name: Optional[StrictStr] = None
    location: Optional[Location] = None
    type: Optional[StrictStr] = None
    members: Optional[StrictInt] = None
    description: Optional[StrictStr] = None
    clan_chest_points: Optional[StrictInt] = Field(default=None, alias="clanChestPoints")
    badge_urls: Optional[Dict[str, Any]] = Field(default=None, alias="badgeUrls")
    __properties: ClassVar[List[str]] = ["memberList", "tag", "clanScore", "clanChestMaxLevel", "clanWarTrophies", "requiredTrophies", "donationsPerWeek", "badgeId", "clanChestStatus", "clanChestLevel", "name", "location", "type", "members", "description", "clanChestPoints", "badgeUrls"]

    @field_validator('clan_chest_status')
    def clan_chest_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['inactive', 'active', 'completed', 'unknown']):
            raise ValueError("must be one of enum values ('inactive', 'active', 'completed', 'unknown')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['open', 'inviteOnly', 'closed']):
            raise ValueError("must be one of enum values ('open', 'inviteOnly', 'closed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Clan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in member_list (list)
        _items = []
        if self.member_list:
            for _item_member_list in self.member_list:
                if _item_member_list:
                    _items.append(_item_member_list.to_dict())
            _dict['memberList'] = _items
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Clan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "memberList": [ClanMember.from_dict(_item) for _item in obj["memberList"]] if obj.get("memberList") is not None else None,
            "tag": obj.get("tag"),
            "clanScore": obj.get("clanScore"),
            "clanChestMaxLevel": obj.get("clanChestMaxLevel"),
            "clanWarTrophies": obj.get("clanWarTrophies"),
            "requiredTrophies": obj.get("requiredTrophies"),
            "donationsPerWeek": obj.get("donationsPerWeek"),
            "badgeId": obj.get("badgeId"),
            "clanChestStatus": obj.get("clanChestStatus"),
            "clanChestLevel": obj.get("clanChestLevel"),
            "name": obj.get("name"),
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "type": obj.get("type"),
            "members": obj.get("members"),
            "description": obj.get("description"),
            "clanChestPoints": obj.get("clanChestPoints"),
            "badgeUrls": obj.get("badgeUrls")
        })
        return _obj



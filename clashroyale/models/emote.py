# coding: utf-8

"""
    Clash Royale API

    Check out <a href=\"https://developer.clashroyale.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash Royale API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashroyale.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Emote(BaseModel):
    """
    Emote
    """ # noqa: E501
    name: Optional[StrictStr] = None
    index_hi: Optional[StrictInt] = Field(default=None, alias="indexHi")
    index_lo: Optional[StrictInt] = Field(default=None, alias="indexLo")
    available: Optional[StrictBool] = None
    default_owned: Optional[StrictBool] = Field(default=None, alias="defaultOwned")
    sfx_file: Optional[StrictStr] = Field(default=None, alias="sfxFile")
    sc_file: Optional[StrictStr] = Field(default=None, alias="scFile")
    available_for_offer: Optional[StrictBool] = Field(default=None, alias="availableForOffer")
    exclusive: Optional[StrictBool] = None
    date_available: Optional[StrictStr] = Field(default=None, alias="dateAvailable")
    human_readable_name: Optional[StrictStr] = Field(default=None, alias="humanReadableName")
    family: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["name", "indexHi", "indexLo", "available", "defaultOwned", "sfxFile", "scFile", "availableForOffer", "exclusive", "dateAvailable", "humanReadableName", "family"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Emote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Emote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "indexHi": obj.get("indexHi"),
            "indexLo": obj.get("indexLo"),
            "available": obj.get("available"),
            "defaultOwned": obj.get("defaultOwned"),
            "sfxFile": obj.get("sfxFile"),
            "scFile": obj.get("scFile"),
            "availableForOffer": obj.get("availableForOffer"),
            "exclusive": obj.get("exclusive"),
            "dateAvailable": obj.get("dateAvailable"),
            "humanReadableName": obj.get("humanReadableName"),
            "family": obj.get("family")
        })
        return _obj



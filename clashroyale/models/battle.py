# coding: utf-8

"""
    Clash Royale API

    Check out <a href=\"https://developer.clashroyale.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash Royale API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashroyale.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from clashroyale.models.arena import Arena
from clashroyale.models.game_mode import GameMode
from clashroyale.models.player_battle_data import PlayerBattleData
from typing import Optional, Set
from typing_extensions import Self

class Battle(BaseModel):
    """
    Battle
    """ # noqa: E501
    game_mode: Optional[GameMode] = Field(default=None, alias="gameMode")
    arena: Optional[Arena] = None
    type: Optional[StrictStr] = None
    deck_selection: Optional[StrictStr] = Field(default=None, alias="deckSelection")
    team: Optional[List[PlayerBattleData]] = None
    opponent: Optional[List[PlayerBattleData]] = None
    challenge_win_count_before: Optional[StrictInt] = Field(default=None, alias="challengeWinCountBefore")
    boat_battle_side: Optional[StrictStr] = Field(default=None, alias="boatBattleSide")
    boat_battle_won: Optional[StrictBool] = Field(default=None, alias="boatBattleWon")
    new_towers_destroyed: Optional[StrictInt] = Field(default=None, alias="newTowersDestroyed")
    prev_towers_destroyed: Optional[StrictInt] = Field(default=None, alias="prevTowersDestroyed")
    remaining_towers: Optional[StrictInt] = Field(default=None, alias="remainingTowers")
    league_number: Optional[StrictInt] = Field(default=None, alias="leagueNumber")
    battle_time: Optional[StrictStr] = Field(default=None, alias="battleTime")
    challenge_id: Optional[StrictInt] = Field(default=None, alias="challengeId")
    tournament_tag: Optional[StrictStr] = Field(default=None, alias="tournamentTag")
    challenge_title: Optional[StrictStr] = Field(default=None, alias="challengeTitle")
    is_ladder_tournament: Optional[StrictBool] = Field(default=None, alias="isLadderTournament")
    is_hosted_match: Optional[StrictBool] = Field(default=None, alias="isHostedMatch")
    __properties: ClassVar[List[str]] = ["gameMode", "arena", "type", "deckSelection", "team", "opponent", "challengeWinCountBefore", "boatBattleSide", "boatBattleWon", "newTowersDestroyed", "prevTowersDestroyed", "remainingTowers", "leagueNumber", "battleTime", "challengeId", "tournamentTag", "challengeTitle", "isLadderTournament", "isHostedMatch"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pvp', 'pve', 'clanmate', 'tournament', 'friendly', 'survival', 'pvp2v2', 'clanmate2v2', 'challenge2v2', 'clanwar_collection_day', 'clanwar_war_day', 'casual_1v1', 'casual_2v2', 'boat_battle', 'boat_battle_practice', 'river_race_pvp', 'river_race_duel', 'river_race_duel_colosseum', 'tutorial', 'path_of_legend', 'seasonal_battle', 'practice', 'trail', 'unknown']):
            raise ValueError("must be one of enum values ('pvp', 'pve', 'clanmate', 'tournament', 'friendly', 'survival', 'pvp2v2', 'clanmate2v2', 'challenge2v2', 'clanwar_collection_day', 'clanwar_war_day', 'casual_1v1', 'casual_2v2', 'boat_battle', 'boat_battle_practice', 'river_race_pvp', 'river_race_duel', 'river_race_duel_colosseum', 'tutorial', 'path_of_legend', 'seasonal_battle', 'practice', 'trail', 'unknown')")
        return value

    @field_validator('deck_selection')
    def deck_selection_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['collection', 'draft', 'draft_competitive', 'predefined', 'event_deck', 'pick', 'wardeck_pick', 'quaddeck_pick', 'unknown']):
            raise ValueError("must be one of enum values ('collection', 'draft', 'draft_competitive', 'predefined', 'event_deck', 'pick', 'wardeck_pick', 'quaddeck_pick', 'unknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Battle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of game_mode
        if self.game_mode:
            _dict['gameMode'] = self.game_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of arena
        if self.arena:
            _dict['arena'] = self.arena.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in team (list)
        _items = []
        if self.team:
            for _item_team in self.team:
                if _item_team:
                    _items.append(_item_team.to_dict())
            _dict['team'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in opponent (list)
        _items = []
        if self.opponent:
            for _item_opponent in self.opponent:
                if _item_opponent:
                    _items.append(_item_opponent.to_dict())
            _dict['opponent'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Battle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gameMode": GameMode.from_dict(obj["gameMode"]) if obj.get("gameMode") is not None else None,
            "arena": Arena.from_dict(obj["arena"]) if obj.get("arena") is not None else None,
            "type": obj.get("type"),
            "deckSelection": obj.get("deckSelection"),
            "team": [PlayerBattleData.from_dict(_item) for _item in obj["team"]] if obj.get("team") is not None else None,
            "opponent": [PlayerBattleData.from_dict(_item) for _item in obj["opponent"]] if obj.get("opponent") is not None else None,
            "challengeWinCountBefore": obj.get("challengeWinCountBefore"),
            "boatBattleSide": obj.get("boatBattleSide"),
            "boatBattleWon": obj.get("boatBattleWon"),
            "newTowersDestroyed": obj.get("newTowersDestroyed"),
            "prevTowersDestroyed": obj.get("prevTowersDestroyed"),
            "remainingTowers": obj.get("remainingTowers"),
            "leagueNumber": obj.get("leagueNumber"),
            "battleTime": obj.get("battleTime"),
            "challengeId": obj.get("challengeId"),
            "tournamentTag": obj.get("tournamentTag"),
            "challengeTitle": obj.get("challengeTitle"),
            "isLadderTournament": obj.get("isLadderTournament"),
            "isHostedMatch": obj.get("isHostedMatch")
        })
        return _obj



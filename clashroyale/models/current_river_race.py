# coding: utf-8

"""
    Clash Royale API

    Check out <a href=\"https://developer.clashroyale.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash Royale API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashroyale.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from clashroyale.models.period_log import PeriodLog
from clashroyale.models.river_race_clan import RiverRaceClan
from typing import Optional, Set
from typing_extensions import Self

class CurrentRiverRace(BaseModel):
    """
    CurrentRiverRace
    """ # noqa: E501
    state: Optional[StrictStr] = None
    clan: Optional[RiverRaceClan] = None
    clans: Optional[List[RiverRaceClan]] = None
    collection_end_time: Optional[StrictStr] = Field(default=None, alias="collectionEndTime")
    war_end_time: Optional[StrictStr] = Field(default=None, alias="warEndTime")
    section_index: Optional[StrictInt] = Field(default=None, alias="sectionIndex")
    period_index: Optional[StrictInt] = Field(default=None, alias="periodIndex")
    period_type: Optional[StrictStr] = Field(default=None, alias="periodType")
    period_logs: Optional[List[PeriodLog]] = Field(default=None, alias="periodLogs")
    __properties: ClassVar[List[str]] = ["state", "clan", "clans", "collectionEndTime", "warEndTime", "sectionIndex", "periodIndex", "periodType", "periodLogs"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['clan_not_found', 'access_denied', 'matchmaking', 'matched', 'full', 'ended']):
            raise ValueError("must be one of enum values ('clan_not_found', 'access_denied', 'matchmaking', 'matched', 'full', 'ended')")
        return value

    @field_validator('period_type')
    def period_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['training', 'war_day', 'colosseum']):
            raise ValueError("must be one of enum values ('training', 'war_day', 'colosseum')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CurrentRiverRace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of clan
        if self.clan:
            _dict['clan'] = self.clan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in clans (list)
        _items = []
        if self.clans:
            for _item_clans in self.clans:
                if _item_clans:
                    _items.append(_item_clans.to_dict())
            _dict['clans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in period_logs (list)
        _items = []
        if self.period_logs:
            for _item_period_logs in self.period_logs:
                if _item_period_logs:
                    _items.append(_item_period_logs.to_dict())
            _dict['periodLogs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CurrentRiverRace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "state": obj.get("state"),
            "clan": RiverRaceClan.from_dict(obj["clan"]) if obj.get("clan") is not None else None,
            "clans": [RiverRaceClan.from_dict(_item) for _item in obj["clans"]] if obj.get("clans") is not None else None,
            "collectionEndTime": obj.get("collectionEndTime"),
            "warEndTime": obj.get("warEndTime"),
            "sectionIndex": obj.get("sectionIndex"),
            "periodIndex": obj.get("periodIndex"),
            "periodType": obj.get("periodType"),
            "periodLogs": [PeriodLog.from_dict(_item) for _item in obj["periodLogs"]] if obj.get("periodLogs") is not None else None
        })
        return _obj



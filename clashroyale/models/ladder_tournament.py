# coding: utf-8

"""
    Clash Royale API

    Check out <a href=\"https://developer.clashroyale.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash Royale API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashroyale.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from clashroyale.models.game_mode import GameMode
from clashroyale.models.survival_milestone_reward import SurvivalMilestoneReward
from typing import Optional, Set
from typing_extensions import Self

class LadderTournament(BaseModel):
    """
    LadderTournament
    """ # noqa: E501
    game_mode: Optional[GameMode] = Field(default=None, alias="gameMode")
    max_losses: Optional[StrictInt] = Field(default=None, alias="maxLosses")
    min_exp_level: Optional[StrictInt] = Field(default=None, alias="minExpLevel")
    tournament_level: Optional[StrictInt] = Field(default=None, alias="tournamentLevel")
    milestone_rewards: Optional[List[SurvivalMilestoneReward]] = Field(default=None, alias="milestoneRewards")
    free_tier_rewards: Optional[List[SurvivalMilestoneReward]] = Field(default=None, alias="freeTierRewards")
    tag: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    start_time: Optional[StrictStr] = Field(default=None, alias="startTime")
    end_time: Optional[StrictStr] = Field(default=None, alias="endTime")
    top_rank_reward: Optional[List[SurvivalMilestoneReward]] = Field(default=None, alias="topRankReward")
    max_top_reward_rank: Optional[StrictInt] = Field(default=None, alias="maxTopRewardRank")
    __properties: ClassVar[List[str]] = ["gameMode", "maxLosses", "minExpLevel", "tournamentLevel", "milestoneRewards", "freeTierRewards", "tag", "title", "startTime", "endTime", "topRankReward", "maxTopRewardRank"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LadderTournament from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of game_mode
        if self.game_mode:
            _dict['gameMode'] = self.game_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in milestone_rewards (list)
        _items = []
        if self.milestone_rewards:
            for _item_milestone_rewards in self.milestone_rewards:
                if _item_milestone_rewards:
                    _items.append(_item_milestone_rewards.to_dict())
            _dict['milestoneRewards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in free_tier_rewards (list)
        _items = []
        if self.free_tier_rewards:
            for _item_free_tier_rewards in self.free_tier_rewards:
                if _item_free_tier_rewards:
                    _items.append(_item_free_tier_rewards.to_dict())
            _dict['freeTierRewards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in top_rank_reward (list)
        _items = []
        if self.top_rank_reward:
            for _item_top_rank_reward in self.top_rank_reward:
                if _item_top_rank_reward:
                    _items.append(_item_top_rank_reward.to_dict())
            _dict['topRankReward'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LadderTournament from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gameMode": GameMode.from_dict(obj["gameMode"]) if obj.get("gameMode") is not None else None,
            "maxLosses": obj.get("maxLosses"),
            "minExpLevel": obj.get("minExpLevel"),
            "tournamentLevel": obj.get("tournamentLevel"),
            "milestoneRewards": [SurvivalMilestoneReward.from_dict(_item) for _item in obj["milestoneRewards"]] if obj.get("milestoneRewards") is not None else None,
            "freeTierRewards": [SurvivalMilestoneReward.from_dict(_item) for _item in obj["freeTierRewards"]] if obj.get("freeTierRewards") is not None else None,
            "tag": obj.get("tag"),
            "title": obj.get("title"),
            "startTime": obj.get("startTime"),
            "endTime": obj.get("endTime"),
            "topRankReward": [SurvivalMilestoneReward.from_dict(_item) for _item in obj["topRankReward"]] if obj.get("topRankReward") is not None else None,
            "maxTopRewardRank": obj.get("maxTopRewardRank")
        })
        return _obj



# coding: utf-8

"""
    Clash Royale API

    Check out <a href=\"https://developer.clashroyale.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash Royale API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashroyale.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from clashroyale.models.game_mode import GameMode
from clashroyale.models.tournament_member import TournamentMember
from typing import Optional, Set
from typing_extensions import Self

class Tournament(BaseModel):
    """
    Tournament
    """ # noqa: E501
    members_list: Optional[List[TournamentMember]] = Field(default=None, alias="membersList")
    status: Optional[StrictStr] = None
    preparation_duration: Optional[StrictInt] = Field(default=None, alias="preparationDuration")
    created_time: Optional[StrictStr] = Field(default=None, alias="createdTime")
    started_time: Optional[StrictStr] = Field(default=None, alias="startedTime")
    ended_time: Optional[StrictStr] = Field(default=None, alias="endedTime")
    first_place_card_prize: Optional[StrictInt] = Field(default=None, alias="firstPlaceCardPrize")
    game_mode: Optional[GameMode] = Field(default=None, alias="gameMode")
    duration: Optional[StrictInt] = None
    type: Optional[StrictStr] = None
    tag: Optional[StrictStr] = None
    creator_tag: Optional[StrictStr] = Field(default=None, alias="creatorTag")
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    capacity: Optional[StrictInt] = None
    max_capacity: Optional[StrictInt] = Field(default=None, alias="maxCapacity")
    level_cap: Optional[StrictInt] = Field(default=None, alias="levelCap")
    __properties: ClassVar[List[str]] = ["membersList", "status", "preparationDuration", "createdTime", "startedTime", "endedTime", "firstPlaceCardPrize", "gameMode", "duration", "type", "tag", "creatorTag", "name", "description", "capacity", "maxCapacity", "levelCap"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['in_preparation', 'in_progress', 'ended', 'unknown']):
            raise ValueError("must be one of enum values ('in_preparation', 'in_progress', 'ended', 'unknown')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['open', 'password_protected', 'unknown']):
            raise ValueError("must be one of enum values ('open', 'password_protected', 'unknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tournament from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in members_list (list)
        _items = []
        if self.members_list:
            for _item_members_list in self.members_list:
                if _item_members_list:
                    _items.append(_item_members_list.to_dict())
            _dict['membersList'] = _items
        # override the default output from pydantic by calling `to_dict()` of game_mode
        if self.game_mode:
            _dict['gameMode'] = self.game_mode.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tournament from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "membersList": [TournamentMember.from_dict(_item) for _item in obj["membersList"]] if obj.get("membersList") is not None else None,
            "status": obj.get("status"),
            "preparationDuration": obj.get("preparationDuration"),
            "createdTime": obj.get("createdTime"),
            "startedTime": obj.get("startedTime"),
            "endedTime": obj.get("endedTime"),
            "firstPlaceCardPrize": obj.get("firstPlaceCardPrize"),
            "gameMode": GameMode.from_dict(obj["gameMode"]) if obj.get("gameMode") is not None else None,
            "duration": obj.get("duration"),
            "type": obj.get("type"),
            "tag": obj.get("tag"),
            "creatorTag": obj.get("creatorTag"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "capacity": obj.get("capacity"),
            "maxCapacity": obj.get("maxCapacity"),
            "levelCap": obj.get("levelCap")
        })
        return _obj



# coding: utf-8

"""
    Clash Royale API

    Check out <a href=\"https://developer.clashroyale.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash Royale API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashroyale.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from clashroyale.models.arena import Arena
from clashroyale.models.item import Item
from clashroyale.models.path_of_legend_season_result import PathOfLegendSeasonResult
from clashroyale.models.player_achievement_badge import PlayerAchievementBadge
from clashroyale.models.player_achievement_progress import PlayerAchievementProgress
from clashroyale.models.player_clan import PlayerClan
from clashroyale.models.player_item_level import PlayerItemLevel
from clashroyale.models.player_league_statistics import PlayerLeagueStatistics
from typing import Optional, Set
from typing_extensions import Self

class Player(BaseModel):
    """
    Player
    """ # noqa: E501
    clan: Optional[PlayerClan] = None
    legacy_trophy_road_high_score: Optional[StrictInt] = Field(default=None, alias="legacyTrophyRoadHighScore")
    current_deck: Optional[List[PlayerItemLevel]] = Field(default=None, alias="currentDeck")
    current_deck_support_cards: Optional[List[PlayerItemLevel]] = Field(default=None, alias="currentDeckSupportCards")
    arena: Optional[Arena] = None
    role: Optional[StrictStr] = None
    wins: Optional[StrictInt] = None
    losses: Optional[StrictInt] = None
    total_donations: Optional[StrictInt] = Field(default=None, alias="totalDonations")
    league_statistics: Optional[PlayerLeagueStatistics] = Field(default=None, alias="leagueStatistics")
    cards: Optional[List[PlayerItemLevel]] = None
    support_cards: Optional[List[PlayerItemLevel]] = Field(default=None, alias="supportCards")
    current_favourite_card: Optional[Item] = Field(default=None, alias="currentFavouriteCard")
    badges: Optional[List[PlayerAchievementBadge]] = None
    tag: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    exp_level: Optional[StrictInt] = Field(default=None, alias="expLevel")
    trophies: Optional[StrictInt] = None
    best_trophies: Optional[StrictInt] = Field(default=None, alias="bestTrophies")
    donations: Optional[StrictInt] = None
    donations_received: Optional[StrictInt] = Field(default=None, alias="donationsReceived")
    achievements: Optional[List[PlayerAchievementProgress]] = None
    battle_count: Optional[StrictInt] = Field(default=None, alias="battleCount")
    three_crown_wins: Optional[StrictInt] = Field(default=None, alias="threeCrownWins")
    challenge_cards_won: Optional[StrictInt] = Field(default=None, alias="challengeCardsWon")
    challenge_max_wins: Optional[StrictInt] = Field(default=None, alias="challengeMaxWins")
    tournament_cards_won: Optional[StrictInt] = Field(default=None, alias="tournamentCardsWon")
    tournament_battle_count: Optional[StrictInt] = Field(default=None, alias="tournamentBattleCount")
    war_day_wins: Optional[StrictInt] = Field(default=None, alias="warDayWins")
    clan_cards_collected: Optional[StrictInt] = Field(default=None, alias="clanCardsCollected")
    star_points: Optional[StrictInt] = Field(default=None, alias="starPoints")
    exp_points: Optional[StrictInt] = Field(default=None, alias="expPoints")
    total_exp_points: Optional[StrictInt] = Field(default=None, alias="totalExpPoints")
    current_path_of_legend_season_result: Optional[PathOfLegendSeasonResult] = Field(default=None, alias="currentPathOfLegendSeasonResult")
    last_path_of_legend_season_result: Optional[PathOfLegendSeasonResult] = Field(default=None, alias="lastPathOfLegendSeasonResult")
    best_path_of_legend_season_result: Optional[PathOfLegendSeasonResult] = Field(default=None, alias="bestPathOfLegendSeasonResult")
    progress: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["clan", "legacyTrophyRoadHighScore", "currentDeck", "currentDeckSupportCards", "arena", "role", "wins", "losses", "totalDonations", "leagueStatistics", "cards", "supportCards", "currentFavouriteCard", "badges", "tag", "name", "expLevel", "trophies", "bestTrophies", "donations", "donationsReceived", "achievements", "battleCount", "threeCrownWins", "challengeCardsWon", "challengeMaxWins", "tournamentCardsWon", "tournamentBattleCount", "warDayWins", "clanCardsCollected", "starPoints", "expPoints", "totalExpPoints", "currentPathOfLegendSeasonResult", "lastPathOfLegendSeasonResult", "bestPathOfLegendSeasonResult", "progress"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['not_member', 'member', 'leader', 'admin', 'coleader']):
            raise ValueError("must be one of enum values ('not_member', 'member', 'leader', 'admin', 'coleader')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Player from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of clan
        if self.clan:
            _dict['clan'] = self.clan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in current_deck (list)
        _items = []
        if self.current_deck:
            for _item_current_deck in self.current_deck:
                if _item_current_deck:
                    _items.append(_item_current_deck.to_dict())
            _dict['currentDeck'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in current_deck_support_cards (list)
        _items = []
        if self.current_deck_support_cards:
            for _item_current_deck_support_cards in self.current_deck_support_cards:
                if _item_current_deck_support_cards:
                    _items.append(_item_current_deck_support_cards.to_dict())
            _dict['currentDeckSupportCards'] = _items
        # override the default output from pydantic by calling `to_dict()` of arena
        if self.arena:
            _dict['arena'] = self.arena.to_dict()
        # override the default output from pydantic by calling `to_dict()` of league_statistics
        if self.league_statistics:
            _dict['leagueStatistics'] = self.league_statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in cards (list)
        _items = []
        if self.cards:
            for _item_cards in self.cards:
                if _item_cards:
                    _items.append(_item_cards.to_dict())
            _dict['cards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in support_cards (list)
        _items = []
        if self.support_cards:
            for _item_support_cards in self.support_cards:
                if _item_support_cards:
                    _items.append(_item_support_cards.to_dict())
            _dict['supportCards'] = _items
        # override the default output from pydantic by calling `to_dict()` of current_favourite_card
        if self.current_favourite_card:
            _dict['currentFavouriteCard'] = self.current_favourite_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in badges (list)
        _items = []
        if self.badges:
            for _item_badges in self.badges:
                if _item_badges:
                    _items.append(_item_badges.to_dict())
            _dict['badges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in achievements (list)
        _items = []
        if self.achievements:
            for _item_achievements in self.achievements:
                if _item_achievements:
                    _items.append(_item_achievements.to_dict())
            _dict['achievements'] = _items
        # override the default output from pydantic by calling `to_dict()` of current_path_of_legend_season_result
        if self.current_path_of_legend_season_result:
            _dict['currentPathOfLegendSeasonResult'] = self.current_path_of_legend_season_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_path_of_legend_season_result
        if self.last_path_of_legend_season_result:
            _dict['lastPathOfLegendSeasonResult'] = self.last_path_of_legend_season_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of best_path_of_legend_season_result
        if self.best_path_of_legend_season_result:
            _dict['bestPathOfLegendSeasonResult'] = self.best_path_of_legend_season_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Player from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clan": PlayerClan.from_dict(obj["clan"]) if obj.get("clan") is not None else None,
            "legacyTrophyRoadHighScore": obj.get("legacyTrophyRoadHighScore"),
            "currentDeck": [PlayerItemLevel.from_dict(_item) for _item in obj["currentDeck"]] if obj.get("currentDeck") is not None else None,
            "currentDeckSupportCards": [PlayerItemLevel.from_dict(_item) for _item in obj["currentDeckSupportCards"]] if obj.get("currentDeckSupportCards") is not None else None,
            "arena": Arena.from_dict(obj["arena"]) if obj.get("arena") is not None else None,
            "role": obj.get("role"),
            "wins": obj.get("wins"),
            "losses": obj.get("losses"),
            "totalDonations": obj.get("totalDonations"),
            "leagueStatistics": PlayerLeagueStatistics.from_dict(obj["leagueStatistics"]) if obj.get("leagueStatistics") is not None else None,
            "cards": [PlayerItemLevel.from_dict(_item) for _item in obj["cards"]] if obj.get("cards") is not None else None,
            "supportCards": [PlayerItemLevel.from_dict(_item) for _item in obj["supportCards"]] if obj.get("supportCards") is not None else None,
            "currentFavouriteCard": Item.from_dict(obj["currentFavouriteCard"]) if obj.get("currentFavouriteCard") is not None else None,
            "badges": [PlayerAchievementBadge.from_dict(_item) for _item in obj["badges"]] if obj.get("badges") is not None else None,
            "tag": obj.get("tag"),
            "name": obj.get("name"),
            "expLevel": obj.get("expLevel"),
            "trophies": obj.get("trophies"),
            "bestTrophies": obj.get("bestTrophies"),
            "donations": obj.get("donations"),
            "donationsReceived": obj.get("donationsReceived"),
            "achievements": [PlayerAchievementProgress.from_dict(_item) for _item in obj["achievements"]] if obj.get("achievements") is not None else None,
            "battleCount": obj.get("battleCount"),
            "threeCrownWins": obj.get("threeCrownWins"),
            "challengeCardsWon": obj.get("challengeCardsWon"),
            "challengeMaxWins": obj.get("challengeMaxWins"),
            "tournamentCardsWon": obj.get("tournamentCardsWon"),
            "tournamentBattleCount": obj.get("tournamentBattleCount"),
            "warDayWins": obj.get("warDayWins"),
            "clanCardsCollected": obj.get("clanCardsCollected"),
            "starPoints": obj.get("starPoints"),
            "expPoints": obj.get("expPoints"),
            "totalExpPoints": obj.get("totalExpPoints"),
            "currentPathOfLegendSeasonResult": PathOfLegendSeasonResult.from_dict(obj["currentPathOfLegendSeasonResult"]) if obj.get("currentPathOfLegendSeasonResult") is not None else None,
            "lastPathOfLegendSeasonResult": PathOfLegendSeasonResult.from_dict(obj["lastPathOfLegendSeasonResult"]) if obj.get("lastPathOfLegendSeasonResult") is not None else None,
            "bestPathOfLegendSeasonResult": PathOfLegendSeasonResult.from_dict(obj["bestPathOfLegendSeasonResult"]) if obj.get("bestPathOfLegendSeasonResult") is not None else None,
            "progress": obj.get("progress")
        })
        return _obj


